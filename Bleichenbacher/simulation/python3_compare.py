Out[3]: 8229186103190533024883904376780813905111588953898498105168002982684296072639509420747763549304544190419927088006808167617437275794116971854836155577368505449421748051065009396803385296687901036962268811893539692787390930893362253485439137750587184318390678894863264384763210110709215529090973953077280768

In [4]: print("B in hex :",'{:0256x}'.format(B))
B in hex : 0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

In [5]: print("B in hex :",'{:0256x}'.format(B*2))
B in hex : 0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

In [6]: print("B in hex :",'{:0256x}'.format(B*3))
B in hex : 0003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

In [7]: print("B in hex :",'{:0256x}'.format(mi))
B in hex : 0002c3420838026296d4bda23e94dcbf761698c2e0ae9bfebaecd7ecd29fa34877419de4764586046c962a5bc4b348d6b82082e01fdce940bd0539c8a446d9ef694f27ef325df5d419bbc971f1814741d33ff21b0b2d855cd239d1f343d5e530cd565b250b56c5b4e1e2774b2a16bab9d36170a5419c3a0d993fc4e54a44dc7d

In [8]: clear


In [9]: B2 = 5486124068793688683255936251187209270074392635932332070112001988456197381759672947165175699536362793613284725337872111744958183862744647903224103718245670299614498700710006264535590197791934024641512541262359795191593953928908168990292758500391456212260452596575509589842140073806143686060649302051520512

In [10]: r= 1

In [11]: n = 158140998574060498111767275988814127408105167910725744762040026949955687559938670954193552066001303112541592233525600119842166173841665687686276509839951457714559721458923567370679375515436423624979286903818664681253348429299433946362233250801766209090322865230531714430998693980195552565196572114558096764271

In [12]: x = 28292

In [13]: 

In [13]: 

In [13]: import math

In [14]: math.ceil((B2 + r*n)/x)
Out[14]: 5589795161110182450833691085243620385029240127557351547233102572540236442420859522395217093013030636357241826058742479603581519702305557220964613310798349440080761220741435303832420116047636048431553010965732045208165112600383807444094952488332215844926072821125672635798843615297574393198376417547517952

In [15]: def ceil(x,y):
   ....:         return x/y + (x%y != 0)
   ....: 

In [16]: ceil((B2 + r*n)/x)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-16-f98c458c566b> in <module>()
----> 1 ceil((B2 + r*n)/x)

TypeError: ceil() missing 1 required positional argument: 'y'

In [17]: ceil((B2 + r*n), x)
Out[17]: 5.589795161110182e+303

In [18]: math.ceil((B2 + r*n)/x) % n
Out[18]: 5589795161110182450833691085243620385029240127557351547233102572540236442420859522395217093013030636357241826058742479603581519702305557220964613310798349440080761220741435303832420116047636048431553010965732045208165112600383807444094952488332215844926072821125672635798843615297574393198376417547517952

In [19]: def ceil(x,y):
        return x/y + (x%y != 0)
   ....: def ceil(x,y):
        return x/y + (x%y != 0)
KeyboardInterrupt

In [19]: def ceil(x,y):return x/y + (x%y != 0)

In [20]: ceil((B2 + r*n), x)  
Out[20]: 5.589795161110182e+303

In [21]: int(ceil((B2 + r*n), x))
Out[21]: 5589795161110182450833691085243620385029240127557351547233102572540236442420859522395217093013030636357241826058742479603581519702305557220964613310798349440080761220741435303832420116047636048431553010965732045208165112600383807444094952488332215844926072821125672635798843615297574393198376417547517952

In [22]: x = B2 + r*n

In [23]: x
Out[23]: 158146484698129291800450531925065314617375242303361677094110138951944143757320430627140717241700839475335205518250937991953911132025528432334179733943669703384859335957624277376943911105634215559003928416359927041048540023253362854531223543560266600546535125683128289940588536120269358708882632763860148284783

In [24]: x = 28292

In [25]: num = B2 + r*n

In [26]: num
Out[26]: 158146484698129291800450531925065314617375242303361677094110138951944143757320430627140717241700839475335205518250937991953911132025528432334179733943669703384859335957624277376943911105634215559003928416359927041048540023253362854531223543560266600546535125683128289940588536120269358708882632763860148284783

In [27]: den = x

In [28]: den 
Out[28]: 28292

In [29]: num/den
Out[29]: 5.589795161110182e+303

In [30]: int(num/den)
Out[30]: 5589795161110182450833691085243620385029240127557351547233102572540236442420859522395217093013030636357241826058742479603581519702305557220964613310798349440080761220741435303832420116047636048431553010965732045208165112600383807444094952488332215844926072821125672635798843615297574393198376417547517952

In [31]: num
Out[31]: 158146484698129291800450531925065314617375242303361677094110138951944143757320430627140717241700839475335205518250937991953911132025528432334179733943669703384859335957624277376943911105634215559003928416359927041048540023253362854531223543560266600546535125683128289940588536120269358708882632763860148284783

In [32]: num//den
Out[32]: 5589795161110182800807667606569536074415921189854435073310834827935251794052044062884939814848750158183769458442349002967408141242242628033867514984577608630880083979839681796159476569547370831295204595516751273895395872446393427630822265783976622386064439618377219353194844341872944956485318562274146341

In [33]: def ceil(x,y):return x/y + (x%y != 0)

In [34]: def ceil(x,y):return x//y + (x%y != 0)

In [35]: ceil((B2 + r*n), x)
Out[35]: 5589795161110182800807667606569536074415921189854435073310834827935251794052044062884939814848750158183769458442349002967408141242242628033867514984577608630880083979839681796159476569547370831295204595516751273895395872446393427630822265783976622386064439618377219353194844341872944956485318562274146342

In [36]: math.floor((B3 - 1 + r*n)/x)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-36-09f8c3abded5> in <module>()
----> 1 math.floor((B3 - 1 + r*n)/x)

NameError: name 'B3' is not defined

In [37]: B3 = 8229186103190533024883904376780813905111588953898498105168002982684296072639509420747763549304544190419927088006808167617437275794116971854836155577368505449421748051065009396803385296687901036962268811893539692787390930893362253485439137750587184318390678894863264384763210110709215529090973953077280768

In [38]: math.floor((B3 - 1 + r*n)/x)
Out[38]: 5589892116505149092482008215323701397407129833701968697854997473703506983300925258414280458069644190536170497020675799101991328072073722874658036384863903337912219369104819400499185768806820926496630687787880515075789232883382442945489681673850229300079898660374187104208058484268141296639169392952737792

In [39]: num = (B3 - 1 + r*n)

In [40]: den = x

In [41]: num//den
Out[41]: 5589892116505149464328861865304358413049988671697993894392237910113755544182500723300378192759458774803195679365672519723235671253974968353532141453256356080164327131591072825536412374548745635727988448064136795594024311474279913354153778097678382449973181673597715880651189636303770033250588968206955112

In [42]: 
